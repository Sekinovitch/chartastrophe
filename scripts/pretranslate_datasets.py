#!/usr/bin/env python3
"""
Script de pr√©-traduction des noms de datasets avec DeepL.
√Ä ex√©cuter une seule fois pour g√©n√©rer le fichier de traductions.

Usage: python scripts/pretranslate_datasets.py
"""

import sys
import os
import json
import time
from pathlib import Path

# Ajouter le r√©pertoire racine au path
sys.path.insert(0, str(Path(__file__).parent.parent))

try:
    import deepl
    DEEPL_AVAILABLE = True
except ImportError:
    DEEPL_AVAILABLE = False
    print("‚ùå DeepL non install√©. Installez avec: pip install deepl")
    sys.exit(1)

from src.config import DEEPL_CONFIG
from src.collectors.real_data_collector import RealSourceGenerator

def collect_all_dataset_names():
    """Collecte tous les noms de datasets possibles."""
    print("üìä Collecte de tous les noms de datasets possibles...")
    
    generator = RealSourceGenerator()
    dataset_names = set()
    
    # G√©n√©rer beaucoup de datasets pour capturer toutes les variations
    print("   üîÑ G√©n√©ration de 500 datasets pour capturer toutes les variations...")
    for i in range(500):
        if i % 50 == 0:
            print(f"   üìà Progression: {i}/500")
        
        try:
            dataset = generator.generate_real_dataset('en')
            dataset_names.add(dataset.name)
        except Exception as e:
            print(f"   ‚ö†Ô∏è Erreur lors de la g√©n√©ration du dataset {i}: {e}")
            continue
    
    # Ajouter des noms de base manuellement pour s'assurer qu'ils sont inclus
    base_names = [
        "Monthly Birth Statistics",
        "Real Estate Transaction Data",
        "Regional Unemployment Statistics", 
        "University Enrollment Data",
        "Global Temperature Anomalies",
        "Renewable Energy Capacity",
        "Mars Curiosity Rover Photography",
        "Google Search Trends",
        "Wikipedia Page Views",
        "Reddit Activity",
        "Programming Language Trends",
        "Global GDP Statistics",
        "CO2 Emissions Data",
        "Internet Usage Statistics",
        "French Railway Station Usage",
        "Paris Metro Station Traffic",
        "NASA Space Data",
        "Climate Change Indicators",
        "Economic Growth Patterns",
        "Technology Innovation Metrics"
    ]
    
    dataset_names.update(base_names)
    
    print(f"‚úÖ Collect√© {len(dataset_names)} noms de datasets uniques")
    return sorted(list(dataset_names))

def translate_with_deepl(names_list, api_key):
    """Traduit tous les noms avec DeepL."""
    print("üåê Traduction avec DeepL...")
    
    if not api_key:
        print("‚ùå Cl√© API DeepL manquante. V√©rifiez votre fichier .env")
        return {}
    
    translator = deepl.Translator(api_key)
    translations = {}
    total = len(names_list)
    
    # Traiter par petits lots pour √©viter de surcharger l'API
    batch_size = 10
    request_delay = 0.5  # D√©lai entre les requ√™tes
    
    for i in range(0, total, batch_size):
        batch = names_list[i:i + batch_size]
        print(f"   üì¶ Lot {i//batch_size + 1}/{(total + batch_size - 1)//batch_size} ({len(batch)} √©l√©ments)")
        
        for j, name in enumerate(batch):
            try:
                if name.strip():  # √âviter les cha√Ænes vides
                    result = translator.translate_text(
                        name,
                        source_lang='EN',
                        target_lang='FR',
                        formality='default'
                    )
                    translations[name] = result.text.strip()
                    print(f"     ‚úÖ '{name[:40]}...' ‚Üí '{result.text[:40]}...'")
                else:
                    translations[name] = name
                
                # D√©lai entre les requ√™tes
                if j < len(batch) - 1:  # Pas de d√©lai apr√®s le dernier √©l√©ment du lot
                    time.sleep(request_delay)
                    
            except deepl.exceptions.QuotaExceededException:
                print(f"‚ùå Quota DeepL d√©pass√© apr√®s {len(translations)} traductions")
                break
            except deepl.exceptions.DeepLException as e:
                print(f"   ‚ö†Ô∏è Erreur DeepL pour '{name}': {e}")
                translations[name] = name  # Garder l'original si √©chec
            except Exception as e:
                print(f"   ‚ö†Ô∏è Erreur g√©n√©rale pour '{name}': {e}")
                translations[name] = name
        
        # D√©lai entre les lots
        if i + batch_size < total:
            print(f"   ‚è∞ Pause de {request_delay * 2}s entre les lots...")
            time.sleep(request_delay * 2)
    
    print(f"‚úÖ Traduction termin√©e: {len(translations)} entr√©es")
    return translations

def save_translations(translations, output_file):
    """Sauvegarde les traductions dans un fichier JSON."""
    print(f"üíæ Sauvegarde dans {output_file}...")
    
    # Cr√©er le r√©pertoire si n√©cessaire
    output_path = Path(output_file)
    output_path.parent.mkdir(parents=True, exist_ok=True)
    
    # Ajouter des m√©tadonn√©es
    data = {
        "metadata": {
            "generated_at": time.strftime("%Y-%m-%d %H:%M:%S"),
            "total_translations": len(translations),
            "deepl_api_used": True,
            "version": "1.0"
        },
        "translations": translations
    }
    
    with open(output_file, 'w', encoding='utf-8') as f:
        json.dump(data, f, ensure_ascii=False, indent=2)
    
    print(f"‚úÖ Sauvegard√© {len(translations)} traductions")

def main():
    """Fonction principale."""
    print("üöÄ Pr√©-traduction des datasets avec DeepL")
    print("=" * 50)
    
    # V√©rifier la cl√© API
    api_key = DEEPL_CONFIG.get('api_key')
    if not api_key:
        print("‚ùå Cl√© API DeepL non trouv√©e.")
        print("   Assurez-vous d'avoir DEEPL_API_KEY dans votre fichier .env")
        return
    
    # Fichier de sortie
    output_file = "data/pretranslated_datasets.json"
    
    try:
        # √âtape 1: Collecter tous les noms
        dataset_names = collect_all_dataset_names()
        
        # √âtape 2: Traduire avec DeepL
        translations = translate_with_deepl(dataset_names, api_key)
        
        if not translations:
            print("‚ùå Aucune traduction g√©n√©r√©e")
            return
        
        # √âtape 3: Sauvegarder
        save_translations(translations, output_file)
        
        print("\nüéâ Pr√©-traduction termin√©e avec succ√®s!")
        print(f"üìÅ Fichier g√©n√©r√©: {output_file}")
        print(f"üìä Nombre de traductions: {len(translations)}")
        print("\nüí° L'application utilisera maintenant ces traductions pr√©-g√©n√©r√©es")
        print("   plus besoin d'appeler DeepL √† chaque g√©n√©ration!")
        
    except KeyboardInterrupt:
        print("\n‚è∏Ô∏è Arr√™t√© par l'utilisateur")
    except Exception as e:
        print(f"\n‚ùå Erreur: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    main() 